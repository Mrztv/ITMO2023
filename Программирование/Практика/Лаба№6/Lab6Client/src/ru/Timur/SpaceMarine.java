package ru.Timur;

import java.io.Serializable;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Class of SpaceMarine main object class
 * @author timur
 */

public class SpaceMarine implements Comparable<SpaceMarine>, Serializable {
    static final long serialVersionUID = 1L;
    /** Поле id*/
    private Long id = Id.incAndGet(); //Поле не может быть null, Значение поля должно быть больше 0, Значение этого поля должно быть уникальным, Значение этого поля должно генерироваться автоматически
    /** Поле имени*/
    private String name; //Поле не может быть null, Строка не может быть пустой
    /** Поле координат
     * @see Coordinates*/
    private Coordinates coordinates; //Поле не может быть null
    /** Поле даты создания*/
    private final ZonedDateTime creationDate = ZonedDateTime.now(); //Поле не может быть null, Значение этого поля должно генерироваться автоматически
    /** Поле здоровья*/
    private Float health; //Поле не может быть null, Значение поля должно быть больше 0
    /** Поле верности*/
    private boolean loyal;
    /** Поле достижений*/
    private String achievements; //Поле может быть null
    /** Поле категории*/
    private AstartesCategory category; //Поле может быть null
    /** Поле части*/
    private Chapter chapter; //Поле не может быть null

    /**
     * Constructor, Id and CreationTime autogenerated
     * @param name
     * @param coordinates
     * @param health
     * @param loyal
     * @param achievements
     * @param category
     * @param chapter
     */
    public SpaceMarine(String name, Coordinates coordinates, Float health, boolean loyal, String achievements, AstartesCategory category, Chapter chapter) {
        this.name = name;
        this.coordinates = coordinates;
        this.health = health;
        this.loyal = loyal;
        this.achievements = achievements;
        this.category = category;
        this.chapter = chapter;
    }

    /**
     * set {@link SpaceMarine#name}
     * @param name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * set {@link SpaceMarine#coordinates}
     * @param coordinates
     */
    public void setCoordinates(Coordinates coordinates) {
        this.coordinates = coordinates;
    }

    /**
     * set {@link SpaceMarine#health}
     * @param health
     */
    public void setHealth(Float health) {
        this.health = health;
    }

    /**
     * set {@link SpaceMarine#loyal}
     * @param loyal
     */
    public void setLoyal(boolean loyal) {
        this.loyal = loyal;
    }

    /**
     * set {@link SpaceMarine#achievements}
     * @param achievements
     */
    public void setAchievements(String achievements) {
        this.achievements = achievements;
    }
    /**
     * Set category field
     * @param category
     */
    public void setCategory(AstartesCategory category) {
        this.category = category;
    }

    /**
     * Set category field
     * @param id
     */
    public void setId(Long id) {
        this.id = id;
    }
    /**
     * Set chapter field
     * @param chapter
     */
    public void setChapter(Chapter chapter) {
        this.chapter = chapter;
    }
    /**
     * @return {@link SpaceMarine#id}
     */
    public Long getId() {
        return id;
    }
    /**
     * @return {@link SpaceMarine#name}
     */
    public String getName() {
        return name;
    }
    /**
     * @return {@link SpaceMarine#coordinates}
     */
    public Coordinates getCoordinates() {
        return coordinates;
    }
    /**
     * @return {@link SpaceMarine#health}
     */
    public Float getHealth() {
        return health;
    }
    /**
     * @return {@link SpaceMarine#loyal}
     */
    public boolean isLoyal() {
        return loyal;
    }
    /**
     * @return {@link SpaceMarine#achievements}
     */
    public String getAchievements() {
        return achievements;
    }
    /**
     * @return {@link SpaceMarine#category}
     */
    public AstartesCategory getCategory() {
        return category;
    }

    /**
     * @return {@link SpaceMarine#chapter}
     */
    public Chapter getChapter() {
        return chapter;
    }

    /**
     * Сортировка по id
     * @param spaceMarine the object to be compared.
     */
    @Override
    public int compareTo(SpaceMarine spaceMarine) {
        return this.id.compareTo(spaceMarine.id);
    }

    /**
     * Вывод объекта
     * @return строку для вывода объекта в поток вывода
     */
    @Override
    public String toString() {
        return "SpaceMarine{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", coordinates=" + coordinates.toString() +
                ", creationDate=" + creationDate.format(DateTimeFormatter.ofPattern("MM/dd/yyyy - HH:mm:ss z")) +
                ", health=" + health +
                ", loyal=" + loyal +
                ", achievements='" + achievements + '\'' +
                ", category=" + category +
                ", chapter=" + chapter.toString() +
                '}';
    }
}
